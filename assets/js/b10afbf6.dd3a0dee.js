"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2905],{14023:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=r(74848),n=r(28453);const o={},i="V1.3 - New detection method: Detect Separation",a={id:"products/double-hip-tracker/v1.3-new-detection-method",title:"V1.3 - New detection method: Detect Separation",description:"Double Hip Tracker V1.3 will introduce a new method to detect loss of tracking, and I'd like to explain it because",source:"@site/docs/products/double-hip-tracker/v1.3-new-detection-method.md",sourceDirName:"products/double-hip-tracker",slug:"/products/double-hip-tracker/v1.3-new-detection-method",permalink:"/docs/products/double-hip-tracker/v1.3-new-detection-method",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/products/double-hip-tracker/faq"},next:{title:"Expressions Menu Hierarchy Editor",permalink:"/docs/products/expressions-menu-hierarchy-editor"}},h={},c=[{value:"In short",id:"in-short",level:2},{value:"The previous method: Tracker hardware status reports",id:"the-previous-method-tracker-hardware-status-reports",level:2},{value:"The new method: Detect Separation between trackers",id:"the-new-method-detect-separation-between-trackers",level:2},{value:"When to turn this off?",id:"when-to-turn-this-off",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"v13---new-detection-method-detect-separation",children:"V1.3 - New detection method: Detect Separation"}),"\n",(0,s.jsxs)(t.p,{children:["Double Hip Tracker ",(0,s.jsx)(t.strong,{children:"V1.3"})," will introduce a new method to detect loss of tracking, and I'd like to explain it because\nit may have consequences in the tracking quality."]}),"\n",(0,s.jsx)(t.h2,{id:"in-short",children:"In short"}),"\n",(0,s.jsxs)(t.p,{children:["A new option called ",(0,s.jsx)(t.strong,{children:"Detect Separation"})," (default ON), will measure the distance that separates the two trackers. If\nthat distance changes too much, one of the trackers probably flew off. We will now try to detect that, in addition to the usual method."]}),"\n",(0,s.jsx)(t.p,{children:"For more details, read below."}),"\n",(0,s.jsx)("video",{controls:!0,width:"816",children:(0,s.jsx)("source",{src:r(65202).A})}),"\n",(0,s.jsx)(t.h2,{id:"the-previous-method-tracker-hardware-status-reports",children:"The previous method: Tracker hardware status reports"}),"\n",(0,s.jsxs)(t.p,{children:["Up to V1.2, Double Hip Tracker was only using ",(0,s.jsx)(t.strong,{children:"status reports from the tracker hardware"})," and drivers to figure out\nif that tracker had lost tracking."]}),"\n",(0,s.jsxs)(t.p,{children:["Hardware trackers normally broadcast the status ",(0,s.jsx)(t.code,{children:"Running_OK"})," when they are tracking normally,\notherwise they either return the status ",(0,s.jsx)(t.code,{children:"Calibrating_OutOfRange"})," when they are out of vision from a lighthouse,\nor in some worst cases, the tracker just disappears from the list of tracked devices if there's radio interference or some other catastrophic\nloss of communication."]}),"\n",(0,s.jsxs)(t.p,{children:["Whenever trackers are broadcasting the ",(0,s.jsx)(t.code,{children:"Calibrating_OutOfRange"})," status, they usually enter a degraded mode, where the position and rotation of the tracker is\neither a result of estimations from the IMU, or past data. This degraded mode works fairly well for micro-occlusions lasting a few milliseconds.\nThis doesn't work so well for durable occlusions, causing the trackers to fly off."]}),"\n",(0,s.jsxs)(t.p,{children:["In many cases, this method works great. In fact, ",(0,s.jsx)(t.a,{href:"https://x.com/vr_hai/status/1678082423601479681",children:"shortly after the release of Double Hip Tracker"}),",\nVRChat itself started to adopt that technique to reject trackers. VRChat would now freeze trackers as soon as they're lost instead of letting it fly off."]}),"\n",(0,s.jsx)(t.h2,{id:"the-new-method-detect-separation-between-trackers",children:"The new method: Detect Separation between trackers"}),"\n",(0,s.jsx)(t.p,{children:"The previous method has three issues:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["There can be a ",(0,s.jsx)(t.strong,{children:"very short delay"})," between the tracker starting to fly off and the tracker hardware reporting itself as lost, so the tracker will fly anyway."]}),"\n",(0,s.jsxs)(t.li,{children:["When the tracker is no longer lost, it will ",(0,s.jsx)(t.strong,{children:"fly back in"})," from the wrong position to the correct one."]}),"\n",(0,s.jsxs)(t.li,{children:["There are cases where the tracker will ",(0,s.jsx)(t.strong,{children:"fly off without ever being detected as lost"}),". This happens most when the tracker is\nonly barely visible by one lighthouse, which will have limited information to resolve how far the tracker is from that lighthouse."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Since we have double trackers, I am introducing a new method to detect loss of tracking in V1.3."}),"\n",(0,s.jsxs)(t.p,{children:["When the ",(0,s.jsx)(t.strong,{children:"Detect Separation"})," option is enabled, the following will happen:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The previous method remains active no matter what, it is just being supplemented by the new method."}),"\n",(0,s.jsx)(t.li,{children:"As long as one tracker is lost, we will use information from when both trackers were healthy to position our virtual tracker."}),"\n",(0,s.jsxs)(t.li,{children:["If one of the tracker hardware reports itself as lost (= previous method), ",(0,s.jsx)(t.strong,{children:"none of the statements below will apply."})]}),"\n",(0,s.jsxs)(t.li,{children:["Whenever the double trackers become separated by a distance larger than 1 meter (3.28 feet), we will consider one of the trackers to be lost.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["There is no time limit. The trackers ",(0,s.jsx)(t.strong,{children:"must"})," come back within 1 meter of each other."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Whenever the double trackers separate above or below 2.5cm (1 inch) of the average distance that separates them, we will consider one of the trackers to be lost.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"There is a time limit: If this situation stays like that for more than 2 seconds, we will calculate a new average distance."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"We will choose which of the two trackers is considered lost based on various factors, including whether the tracker hardware has recently reported it as lost,\nan excessive distance between the tracker and the HMD, or the velocity of the tracker."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This method is ON by default, but you can toggle it individually on each double tracker."}),"\n",(0,s.jsx)(t.h2,{id:"when-to-turn-this-off",children:"When to turn this off?"}),"\n",(0,s.jsx)(t.p,{children:"This method is optional, and in rare cases there might be a reason to turn it off:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"You may need to turn it off if you are wearing two trackers that strongly move independently of each other."}),"\n",(0,s.jsx)(t.li,{children:"If the distance between your two trackers is very small."}),"\n",(0,s.jsx)(t.li,{children:"If you are doing physical movements that would cause a strong variation in the distance between your trackers."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"There may be options to tweak this even further in future versions, stay tuned, and ask on Discord."})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65202:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/medias/dhtv130-f-5252c4aff0d618366ec859b832fe0d1a.mp4"}}]);