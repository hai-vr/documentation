"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[433],{59342:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=n(74848),o=n(28453);const s={sidebar_position:5,title:"Modification API",unlisted:!0},r="Functions: Modification API",a={id:"products/animator-as-code/functions/modification",title:"Modification API",description:"The Modification API is an upcoming API that is being introduced to 1.3.0. It is not currently available for use.",source:"@site/docs/products/animator-as-code/functions/modification.md",sourceDirName:"products/animator-as-code/functions",slug:"/products/animator-as-code/functions/modification",permalink:"/docs/products/animator-as-code/functions/modification",draft:!1,unlisted:!0,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Modification API",unlisted:!0},sidebar:"tutorialSidebar"},l={},c=[{value:"Minimum version",id:"minimum-version",level:4},{value:"Animator creation overview",id:"animator-creation-overview",level:4},{value:"Base (AacFlBase)",id:"base-aacflbase",level:2},{value:"Modification (AacFlModification)",id:"modification-aacflmodification",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"functions-modification-api",children:"Functions: Modification API"}),"\n",(0,t.jsx)(i.p,{children:"The Modification API is an upcoming API that is being introduced to 1.3.0. It is not currently available for use."}),"\n",(0,t.jsxs)(i.p,{children:["It is designed specifically for the ",(0,t.jsx)(i.strong,{children:"creation and distribution of modular prefabs"}),", where you generate assets on your developer machine\nand distribute those generated assets to your users. Your users will not need to install Animator As Code."]}),"\n",(0,t.jsxs)(i.p,{children:["When using the Modification API, you will provide references to existing AnimatorController, AnimationClip, and BlendTree assets.\nThese assets will be emptied and their contents replaced with the newly generated content. This is a ",(0,t.jsx)(i.strong,{children:"destructive process"}),", conversely intended\nfor the creation of ",(0,t.jsx)(i.strong,{children:"non-destructive prefabs"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"minimum-version",children:"Minimum version"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"The Modification API requires 1.3.0 minimum."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"animator-creation-overview",children:"Animator creation overview"}),"\n",(0,t.jsx)(i.mermaid,{value:"graph TD;\n    AacV1[static AacV1]:::roots--\x3e|Create|Base:::roots;\n    Base--\x3e|Modification|Modification\n    \n    Modification--\x3e|ResetAnimatorController|Controller:::focus;\n    Modification--\x3e|ResetClip|Clip:::focus;\n    Modification--\x3e|ResetBlendTree|BlendTree:::focus;\n    \n    classDef disabled fill:#CCC\n    classDef roots fill:#FCC\n    classDef focus fill:#CFF"}),"\n",(0,t.jsx)(i.h2,{id:"base-aacflbase",children:"Base (AacFlBase)"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"AacFlModification Modification()"}),(0,t.jsx)("br",{}),"\nReturns an AacFlModification, granting you access to this destructive modification API. You will need to reuse this object throughout."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"modification-aacflmodification",children:"Modification (AacFlModification)"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"AacFlController ResetAnimatorController(RuntimeAnimatorController controllerToReset)"}),(0,t.jsx)("br",{}),"\nImmediately removes all layers and all parameters from the given AnimatorController, and returns a AacFlController that will edit the given AnimatorController.",(0,t.jsx)("br",{}),"\nThis AnimatorController instance is memorized in the current AacFlModification instance memory."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"AacFlClip ResetClip(AnimationClip clipToReset)"}),(0,t.jsx)("br",{}),"\nImmediately removes all curves on the clip, resets all attributes of the clip asset, and returns a AacFlClip that will edit the given AnimationClip.",(0,t.jsx)("br",{}),"\nThis AnimationClip instance is memorized in the current AacFlModification instance memory."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"AacFlNonInitializedBlendTree ResetBlendTree(BlendTree blendTreeToReset)"}),(0,t.jsx)("br",{}),"\nImmediately clears the list of children in the given BlendTree, sets the parameters to empty strings, and returns a AacFlNonInitializedBlendTree that will edit the given BlendTree.",(0,t.jsx)("br",{}),"\nThis BlendTree instance is memorized in the current AacFlModification instance memory."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"void SetDirtyAll()"}),(0,t.jsx)("br",{}),"\nCalls ",(0,t.jsx)(i.code,{children:"EditorUtility.SetDirty(...)"})," on every single AnimatorController, AnimationClip, and BlendTree asset instances that were previously memorized by this AacFlModification instance."]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);