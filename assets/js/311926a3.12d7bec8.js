"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[433],{59342:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=i(74848),o=i(28453);const r={sidebar_position:5,title:"Modification API"},a="Functions: Modification API",s={id:"products/animator-as-code/functions/modification",title:"Modification API",description:"The Modification API is an upcoming API that is being introduced to 1.3.0. It is currently part of 1.3.0-alpha.1.",source:"@site/docs/products/animator-as-code/functions/modification.md",sourceDirName:"products/animator-as-code/functions",slug:"/products/animator-as-code/functions/modification",permalink:"/docs/products/animator-as-code/functions/modification",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Modification API"},sidebar:"tutorialSidebar",previous:{title:"Base functions",permalink:"/docs/products/animator-as-code/functions/base"},next:{title:"VRChat",permalink:"/docs/products/animator-as-code/functions/vrchat"}},l={},c=[{value:"Minimum version",id:"minimum-version",level:4},{value:"Animator creation overview",id:"animator-creation-overview",level:4},{value:"Base (AacFlBase)",id:"base-aacflbase",level:2},{value:"Modification (AacFlModification)",id:"modification-aacflmodification",level:2},{value:"Set Dirty",id:"set-dirty",level:3},{value:"Reset",id:"reset",level:3},{value:"Clear",id:"clear",level:3},{value:"Edit",id:"edit",level:3},{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"functions-modification-api",children:"Functions: Modification API"}),"\n",(0,t.jsx)(n.p,{children:"The Modification API is an upcoming API that is being introduced to 1.3.0. It is currently part of 1.3.0-alpha.1."}),"\n",(0,t.jsxs)(n.p,{children:["It is designed specifically for the ",(0,t.jsx)(n.strong,{children:"creation and distribution of modular prefabs"}),", where you generate assets on your developer machine\nand distribute those generated assets to your users. Your users will not need to install Animator As Code."]}),"\n",(0,t.jsxs)(n.p,{children:["When using the Modification API, you will provide references to existing AnimatorController, AnimationClip, and BlendTree assets.\nThese assets will be emptied and their contents replaced with the newly generated content. This is a ",(0,t.jsx)(n.strong,{children:"destructive process"}),", conversely intended\nfor the creation of ",(0,t.jsx)(n.strong,{children:"non-destructive prefabs"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The Modification API can be accessed by calling ",(0,t.jsx)(n.code,{children:"(AacFlBase).Modification()"})]}),"\n",(0,t.jsx)(n.h4,{id:"minimum-version",children:"Minimum version"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Modification API requires 1.3.0 minimum."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"animator-creation-overview",children:"Animator creation overview"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD;\n    AacV1[static AacV1]:::roots--\x3e|Create|Base:::roots;\n    Base--\x3e|Modification|Modification\n    \n    Modification--\x3e|ResetAnimatorController|Controller:::focus;\n    Modification--\x3e|ResetClip|Clip:::focus;\n    Modification--\x3e|ResetBlendTree|BlendTree:::focus;\n    Modification--\x3e|ClearAnimatorController|Modification:::focus;\n    Modification--\x3e|EditAnimatorController|Controller:::focus;\n    \n    classDef disabled fill:#CCC\n    classDef roots fill:#FCC\n    classDef focus fill:#CFF"}),"\n",(0,t.jsx)(n.h2,{id:"base-aacflbase",children:"Base (AacFlBase)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AacFlModification Modification()"}),(0,t.jsx)("br",{}),"\nReturns a new AacFlModification instance, granting you access to this destructive modification API. You will need to reuse this instance throughout."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"modification-aacflmodification",children:"Modification (AacFlModification)"}),"\n",(0,t.jsx)(n.h3,{id:"set-dirty",children:"Set Dirty"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"void SetDirtyAll()"}),(0,t.jsx)("br",{}),"\nCalls ",(0,t.jsx)(n.code,{children:"EditorUtility.SetDirty(...)"})," on every single AnimatorController, AnimationClip, and BlendTree asset instances previously memorized by this AacFlModification instance."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"reset",children:"Reset"}),"\n",(0,t.jsxs)(n.p,{children:["All functions beginning with ",(0,t.jsx)(n.em,{children:"Reset"})," clear the asset."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"AacFlController ResetAnimatorController(AnimatorController controllerToReset)"}),(0,t.jsx)("br",{}),"\nImmediately removes all layers and all parameters from the given AnimatorController, and returns a AacFlController that will edit the given AnimatorController.",(0,t.jsx)("br",{}),"\nThis AnimatorController instance is memorized in the current AacFlModification instance memory.",(0,t.jsx)("br",{}),"\nNote: The AnimatorController class is editor-only, so they can't be referenced inside scene components or asset objects. If you have a RuntimeAnimatorController instance, you should cast it to AnimatorController."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"AacFlClip ResetClip(AnimationClip clipToReset)"}),(0,t.jsx)("br",{}),"\nImmediately removes all curves on the clip, and returns a AacFlClip that will edit the given AnimationClip.",(0,t.jsx)("br",{}),"\nThis does not reset any other attribute of the clip (e.g., is looping, etc.).",(0,t.jsx)("br",{}),"\nThis AnimationClip instance is memorized in the current AacFlModification instance memory."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"AacFlNonInitializedBlendTree ResetBlendTree(BlendTree blendTreeToReset)"}),(0,t.jsx)("br",{}),"\nImmediately clears the list of children in the given BlendTree, sets the parameters to empty strings, and returns a AacFlNonInitializedBlendTree that will edit the given BlendTree.",(0,t.jsx)("br",{}),"\nThis does not reset any other attribute of the blend tree (e.g., automatic thresholds, etc.).",(0,t.jsx)("br",{}),"\nThis BlendTree instance is memorized in the current AacFlModification instance memory.",(0,t.jsx)("br",{}),"\nNote: The BlendTree class is editor-only, so they can't be referenced inside scene components or asset objects. If you have a Motion instance that is a BlendTree instance, you should cast it to BlendTree."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"clear",children:"Clear"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AacFlModification ClearAnimatorController(AnimatorController controllerToReset)"}),(0,t.jsx)("br",{}),"\nImmediately removes all layers and all parameters from the given AnimatorController.",(0,t.jsx)("br",{}),"\nThis AnimatorController instance is memorized in the current AacFlModification instance memory.",(0,t.jsx)("br",{}),"\nNote: The AnimatorController class is editor-only, so they can't be referenced inside scene components or asset objects. If you have a RuntimeAnimatorController instance, you should cast it to AnimatorController."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"edit",children:"Edit"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AacFlController EditAnimatorController(AnimatorController controllerToReset)"}),(0,t.jsx)("br",{}),"\nReturns a AacFlController that will edit the given AnimatorController. This does not reset the AnimatorController.",(0,t.jsx)("br",{}),"\nThis AnimatorController instance is memorized in the current AacFlModification instance memory.",(0,t.jsx)("br",{}),"\nNote: The AnimatorController class is editor-only, so they can't be referenced inside scene components or asset objects. If you have a RuntimeAnimatorController instance, you should cast it to AnimatorController."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to use the Modification API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\nusing UnityEngine;\n\n#if UNITY_EDITOR\nusing AnimatorAsCode.V1;\nusing UnityEditor;\nusing UnityEditor.Animations;\n#endif\n\npublic class Internal_MyExampleBehaviour : MonoBehaviour\n{\n    public Transform avatarRootTransform;\n    \n    public RuntimeAnimatorController animatorController;\n    public AnimationClip animationClipZero;\n    public AnimationClip animationClipOne;\n    public Motion blendTree;\n\n    public GameObject toggle;\n}\n\n#if UNITY_EDITOR\n[CustomEditor(typeof(Internal_MyExampleBehaviour))]\npublic class Internal_MyBehaviourEditor : Editor\n{\n    public override void OnInspectorGUI()\n    {\n        var my = (Internal_MyExampleBehaviour)target;\n\n        DrawDefaultInspector();\n\n        if (GUILayout.Button("(DEVELOPER ONLY) Generate")) Generate(my);\n        if (GUILayout.Button("(DEVELOPER ONLY) Create a new blend tree asset"))\n        {\n            var bt = new BlendTree();\n            AssetDatabase.CreateAsset(bt, $"Assets/example_{Guid.NewGuid().ToString().Substring(0, 9)}.asset");\n            EditorGUIUtility.PingObject(bt);\n        }\n    }\n\n    private void Generate(Internal_MyExampleBehaviour my)\n    {\n        if (my.blendTree is not BlendTree) throw new ArgumentException("The blendTree inside the component must be a BlendTree instance.");\n        \n        var useWriteDefaults = true;\n        \n        var aac = AacV1.Create(new AacConfiguration\n        {\n            SystemName = "MySystemName",\n            AnimatorRoot = my.avatarRootTransform,\n            DefaultValueRoot = my.avatarRootTransform,\n            DefaultsProvider = new AacDefaultsProvider(useWriteDefaults),\n            \n            // As long as you only use the Modification API, the following are irrelevant:\n            AssetKey = GUID.Generate().ToString(),\n            ContainerMode = AacConfiguration.Container.Never,\n            AssetContainer = null,\n            AssetContainerProvider = null,\n        });\n        var modification = aac.Modification();\n\n        var ctrl = modification.ResetAnimatorController(my.animatorController as AnimatorController);\n        var layer = ctrl.NewLayer("ExampleLayer");\n\n        var blendTree = modification.ResetBlendTree(my.blendTree as BlendTree)\n            .Simple1D(layer.FloatParameter("MyValue"))\n            .WithAnimation(modification.ResetClip(my.animationClipZero).Toggling(my.toggle, false), 0f)\n            .WithAnimation(modification.ResetClip(my.animationClipOne).Toggling(my.toggle, true), 1f);\n\n        layer.NewState("Blend").WithAnimation(blendTree);\n    }\n}\n#endif\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);